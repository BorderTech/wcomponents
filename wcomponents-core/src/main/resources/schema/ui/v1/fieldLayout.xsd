<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="https://github.com/bordertech/wcomponents/namespace/ui/v1.0"
	xmlns:ui="https://github.com/bordertech/wcomponents/namespace/ui/v1.0">
	<xs:include schemaLocation="attributeGroups.container.xsd" />
	<xs:include schemaLocation="margin.xsd" />
	<xs:include schemaLocation="contentGroups.xsd" />

	<xs:element name="fieldlayout">
		<xs:annotation>
			<xs:documentation>WFieldLayout represents a container for the layout of label:component pairs.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="ui:margin" minOccurs="0" />
				<xs:element ref="ui:field" minOccurs="0" maxOccurs="unbounded" />
			</xs:sequence>

			<xs:attributeGroup ref="ui:container.attributes" />

			<xs:attribute name="labelWidth">
				<xs:simpleType>
					<xs:restriction base="xs:int">
						<xs:minInclusive value="1" />
						<xs:maxInclusive value="100" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>

			<xs:attribute name="layout" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="flat" />
						<xs:enumeration value="stacked" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			
			<xs:attribute name="title" type="xs:string" />
			
			<xs:attribute name="ordered">
				<xs:annotation>
					<xs:documentation>If set then the FieldLayout will output as an ordered list. If ordered &gt; 1 then
					The numbering will start at this value.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:int">
						<xs:minInclusive value="1" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name="field">
		<xs:complexType>
			<xs:annotation>
				<xs:documentation>WField represents a single label:component group within a WFieldLayout. The field may exist without a label or an input component or even without
					either of these</xs:documentation>
			</xs:annotation>

			<xs:sequence>
				<xs:element ref="ui:label" minOccurs="0" maxOccurs="1" />
				<xs:element name="input" minOccurs="0" maxOccurs="1">
					<xs:annotation>
						<xs:documentation>A wrapper for the field's component.</xs:documentation>
					</xs:annotation>
					<xs:complexType mixed="true">
						<xs:sequence>
							<xs:group ref="ui:contentGroup" minOccurs="0" maxOccurs="unbounded" />
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:sequence>

			<xs:attributeGroup ref="ui:container.attributes" />

			<xs:attribute name="inputWidth">
				<xs:annotation>
					<xs:documentation><p>Indicates the width of the input wrapper a percentage of available space. If not output then the input component width is determined by the
							user agent based on its instrinsic size properties (if any), the available space (if wrapping is possible) or the natural 'size' of the component.</p>
						<p>This attribute, even when set, may be ignored or overridden in the theme and by the rendering user agent depending on the component(s) which are being
							constrained.</p>
						<h3>Under Review</h3>
						<p>Note that the available space will be determined not just by the UI nesting and viewport but also by the parent WFieldLayout's @layout and @labelWidth
							attribute. For example if the parent WFieldLayout's layout is flat and the labelWidth is 50% then the value of this attribute will provide for a width
							which is a proportion of the remaining 50% of the WFieldLayout's width; this means a value of 50 will provide 25% of the WFieldLayout width to the input
							wrapper. The impact of this is that it really only makes sense to have a value of 100, which is used to make all input controls be the same width: being
							the full amount of the available space.</p></xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:int">
						<xs:minInclusive value="1" />
						<xs:maxInclusive value="100" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
</xs:schema>
