<project name="BuildCss" default="build" >
	<!--
		Build the CSS (from Sass in SCSS format) for a given implementation.

		This build must be called with the name of the implementation rootdir set in property "implementation.name". If
		 not set then the css from "wcomponents-theme" alone will be used.

		build-images.xml and build-resource.xml needs to be called before this build so that the base64
		task can find images and webfonts to embed
	-->
	<import file="build-import.xml" />
	<!--
		Temp directories used in the build for copy and Sass compile. The copy step is necessary for implementation
		over-rides and ANT property replacement.
	-->
	<!-- The destination directory for CSS after transpile but before base64 encoding media and compression. -->
	<property name="css.tmp.target.dir" location="${tmp.dir}/css-built" />
	<!-- where the Sass source is found. -->
	<property name="sass.rootdir" location="${common.src.rootdir}/sass" />
	<!-- where the Sass for a child implementation is found (if set). -->
	<property name="impl.sass.rootdir" location="${impl.src.main.dir}/sass" />
	<property name="sass.tmp.src.dir" location="${tmp.dir}/sass" />
	<!-- final destination for built CSS. -->
	<property name="css.build.target.dir" location="${target.rootdir}/${css.target.dir.name}"/>

	<target name="build" depends="init, copySassSrc, compileSass, minify" description="Builds CSS artifacts then minifies them"> </target>

	<target name="minify">
		<stopwatch name="minifyCss" action="start" />
		<for param="file">
			<fileset dir="${css.tmp.target.dir}">
				<include name="*.css" />
			</fileset>
			<sequential>
				<var name="base.name" unset="true" />
				<var name="css.name" unset="true" />
				<basename property="base.name" file="@{file}" />
				<!-- base.name is now the file name without the path -->
				<copy file="@{file}" todir="${tmp.dir}" overwrite="true" />
				<propertyregex property="css.name" input="${base.name}"
								regexp="(.+).css"
								select="\1"
								casesensitive="false" />
				<!-- css.name is now the file name without the ${debug.target.file.name.suffix}.css bit -->
				<minify sourceFile="${tmp.dir}/${base.name}" destFile="${css.build.target.dir}/${css.name}.css" />
			</sequential>
		</for>
		<stopwatch name="minifyCss" action="total" />
	</target>

	<target name="clean" description="Cleans up all artifacts produced by this build">
		<delete dir="${css.build.target.dir}" />
		<delete dir="${sass.tmp.src.dir}" />
		<delete dir="${css.tmp.target.dir}" />
	</target>

	<target name="init" depends="clean">
		<property file="${properties.build.constants}" />
		<mkdir dir="${css.build.target.dir}" />
		<mkdir dir="${sass.tmp.src.dir}" />
		<mkdir dir="${css.tmp.target.dir}" />
	</target>

	<!--
		Make a copy of the source which the rest of the build will use. This also the implementation files to overwrite
		the core files of the same name so the rest of the build script doesn't need to worry about that.
		NOTE: we use multiple copies here because there appears to be an ANT bug which changes the path order and fails to
		overwrite correctly.
	-->
	<target name="copySassSrc">
		<!-- wcomponents-theme SCSS -->
		<copy todir="${sass.tmp.src.dir}" overwrite="true" quiet="true">
			<fileset dir="${sass.rootdir}" includes="**/*.scss, **/lib/**" />
		</copy>

		<!-- Implementation SCSS -->
		<copy todir="${sass.tmp.src.dir}" overwrite="true" quiet="true">
			<fileset dir="${impl.sass.rootdir}" includes="**/*.scss, **/lib/**" erroronmissingdir="false" />
		</copy>
	</target>

	<!--
		Compile Sass to CSS using Vaadin Sass-compiler wrapped by SassTask for efficiency.
	-->
	<target name="compileSass">
		<stopwatch name="compileSass" action="start" />
		<taskdef name="sass" classname="com.github.bordertech.wcomponents.sass.SassTask" classpathref="project.class.path"/>
		<sass in="${sass.tmp.src.dir}" out="${css.tmp.target.dir}" urlmode="absolute"/>
		<stopwatch name="compileSass" action="total" />
	</target>

	<macrodef name="minify">
		<attribute name="sourceFile" />
		<attribute name="destFile" />
		<sequential>
			<property name="cleancss.executable" location="${basedir}/node_modules/clean-css/bin/cleancss"/>
			<echo>node ${cleancss.executable} --skip-import --skip-aggressive-merging --skip-rebase --rounding-precision -1 -o @{destFile} @{sourceFile}</echo>
			<nodejs.exec failonerror="true" cwd="${target.rootdir}">
				<arguments>
					<arg value="${cleancss.executable}"/>
					<arg value="--skip-import"/>
<!--					<arg value="-\-skip-advanced"/>-->
					<arg value="--skip-aggressive-merging"/>
<!--					<arg value="-\-skip-media-merging"/>-->
					<arg value="--skip-rebase"/>
<!--					<arg value="-\-skip-restructuring"/>
					<arg value="-\-skip-shorthand-compacting"/> -->
					<arg value="--rounding-precision"/>
					<arg value="-1"/>
					<arg value="-o"/>
					<arg value="@{destFile}"/>
					<arg value="@{sourceFile}"/>
				</arguments>
			</nodejs.exec>
		</sequential>
	</macrodef>

</project>
