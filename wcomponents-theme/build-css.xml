<project name="BuildCss" default="build" >
	<!--
		Build the CSS (from Sass in SCSS format) for a given implementation.
	-->
	<import file="build-import.xml" />

	<target name="build" depends="init, copySassSrc, compileSass, minify" description="Builds CSS artifacts then minifies them"> </target>

	<target name="init">
		<mkdir dir="${target.rootdir}/style" />
		<mkdir dir="${tmp.dir}/css-built" />
	</target>

	<!--
		Make a copy of the source which the rest of the build will use. This also the implementation files to overwrite
		the core files of the same name so the rest of the build script doesn't need to worry about that.
	-->
	<target name="copySassSrc">
		<!-- wcomponents-theme SCSS -->
		<copy todir="${tmp.dir}/sass" overwrite="true" quiet="true">
			<fileset dir="${common.src.rootdir}/sass" includes="**" />
		</copy>

		<!-- Implementation SCSS -->
		<copy todir="${tmp.dir}/sass" overwrite="true" quiet="true">
			<fileset dir="${impl.src.main.dir}/sass" includes="**" erroronmissingdir="false" />
		</copy>
	</target>

	<!--
		Compile Sass to CSS using sass ( https://www.npmjs.com/package/sass )
	-->
	<target name="compileSass">
		<stopwatch name="compileSass" action="start" />
		<for param="file">
			<fileset dir="${tmp.dir}/sass" includes="*.scss" excludes="_*.scss" />
			<sequential>
				<var name="base.name" unset="true" />
				<var name="css.name" unset="true" />
				<basename property="base.name" file="@{file}" />
				<propertyregex property="css.name" input="${base.name}"
								regexp="(.+)\.scss"
								select="\1"
								casesensitive="false" />
				<compilesass sourceFile="@{file}" destFile="${tmp.dir}/css-built/${css.name}.css" />
			</sequential>
		</for>
		<stopwatch name="compileSass" action="total" />
	</target>

	<target name="minify">
		<stopwatch name="minifyCss" action="start" />
		<for param="file">
			<fileset dir="${tmp.dir}/css-built">
				<include name="*.css" />
			</fileset>
			<sequential>
				<var name="base.name" unset="true" />
				<basename property="base.name" file="@{file}" />
				<minify sourceFile="@{file}" destFile="${target.rootdir}/style/${base.name}" />
			</sequential>
		</for>
		<stopwatch name="minifyCss" action="total" />
	</target>

	<macrodef name="minify">
		<attribute name="sourceFile" />
		<attribute name="destFile" />
		<sequential>
			<property name="cleancss.executable" location="${basedir}/node_modules/clean-css/bin/cleancss"/>
			<echo level="verbose">node ${cleancss.executable} --skip-import --skip-aggressive-merging --skip-rebase --rounding-precision -1 -o @{destFile} @{sourceFile}</echo>
			<nodejs.exec failonerror="true" cwd="${target.rootdir}">
				<arguments>
					<arg value="${cleancss.executable}"/>
					<arg value="--skip-import"/>
<!--					<arg value="-\-skip-advanced"/>-->
					<arg value="--skip-aggressive-merging"/>
					<arg value="--skip-rebase"/>
					<arg value="--rounding-precision"/>
					<arg value="-1"/>
					<arg value="-o"/>
					<arg value="@{destFile}"/>
					<arg value="@{sourceFile}"/>
				</arguments>
			</nodejs.exec>
		</sequential>
	</macrodef>

	<macrodef name="compilesass">
		<attribute name="sourceFile" />
		<attribute name="destFile" />
		<sequential>
			<property name="sass.executable" location="${basedir}/node_modules/sass/sass"/>
			<nodejs.exec failonerror="true" cwd="${target.rootdir}" outfile="@{destFile}">
				<arguments>
					<arg value="${sass.executable}"/>
					<arg value="@{sourceFile}"/>
				</arguments>
			</nodejs.exec>
		</sequential>
	</macrodef>

</project>
