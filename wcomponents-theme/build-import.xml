<project name="ThemeBuildImports" xmlns:if="ant:if" xmlns:unless="ant:unless">
	<description>Common properties and macros needed for sub builds</description>

	<!--
		Some properties we do not want ANYONE to be able to override.
	-->
	<property name="build.number" value="${project.version}"/>
	<!--
		Per-user/per build overrides. See `user.xml` for some options.
	-->
	<import file="build-import-overrides.xml" optional="true"/>

  <basename property="impl.dir.name" file="${basedir}" />

  <!-- the source of the theme to be built. This will change if the theme inherits from another theme. -->
	<property name="impl.src.dir" location="${theme.impl.dir}"/>

	<!-- GLOBAL PROPERTIES: used in both input and output tasks -->
	<property name="tmp.dir" location="${theme.tmp.dir}"/>

	<property name="npm.loglevel" value="silent"/>

	<!-- OUTPUT PROPERTIES: relating to the artefacts generated by this build -->
	<property name="target.rootdir" location="${build.rootdir}/classes/theme/${impl.dir.name}"/>


	<!-- ENVIRONMENT PROPERTIES -->
	<property environment="env"/>
	<hostinfo/>

	<path id="project.class.path">
		<path path="${maven.plugin.classpath}"/>
	</path>
	<!-- TASKDEFS and MACRODEFS -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="project.class.path"/>
	<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="project.class.path"/>

	<!--
		Checks that all properties have been expanded during the build.
		Unexpanded properties are a common source of build errors so this
		is an important check.
	-->
	<target name="checkPropertiesExpanded">
		<path id="unexpanded.properties">
			<fileset dir="${build.rootdir}/classes/theme">
				<include name="**/*.js"/>
				<include name="**/*.css"/>
				<include name="**/*.xsl"/>
				<include name="**/*.xml"/>
				<include name="**/*.html"/>
				<include name="**/resource/*.mustache"/>
				<exclude name="**/lib/**"/>
				<exclude name="**/resource/*/**"/>
				<containsregexp expression="\$\{[^\}]+\}"/>
			</fileset>
		</path>
		<property name="unexpanded" refid="unexpanded.properties"/>
		<fail message="UNEXPANDED PROPERTIES FOUND: ${unexpanded}">
			<condition>
				<resourcecount when="greater" count="0" refid="unexpanded.properties" />
			</condition>
		</fail>
	</target>

	<!--
		Runs static analysis on javascript code.

		Note we deliberately overwrite the config file so it's harder to change.
		This is so we all code to the same standard - if you agree this is a noble goal then please work within this constraint.
		If you don't like the standard get in touch and we can look at changing it.
	-->
	<macrodef name="javascript.lint">
		<attribute name="jsdir" description="The directory that contains javascript to lint."/>
		<attribute name="failonerror" default="true"/>
		<sequential>
			<property name="jshint.executable" location="${basedir}/node_modules/eslint/bin/eslint.js"/>
			<property name="jshintrc" location="${basedir}/.eslintrc"/>
			<property name="jshintignore" location="${basedir}/.eslintignore"/>
			<echo file="${jshintrc}" force="true">{
	"env": {
		"browser": true,
		"amd": true
	},
	"extends": "eslint:recommended",
	"rules": {
		"no-console": 0,
		"no-shadow": 2,
		"brace-style": 2,
		"semi": [2, "always"],
		"space-before-blocks": [2, "always"],
		"spaced-comment": [2, "always"],
		"keyword-spacing": 2,
		"indent": [2, "tab", { "SwitchCase": 1 } ],
		"quotes": 0
	},
	"globals": {
		"KeyEvent": true,
		"Promise": true,
		"DataView": true
	}
}
</echo>
			<echo file="${jshintignore}" force="true"># Only ignore third-party scripts
**/lib/**
</echo>
			<echo>
☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠
If the build fails here it means static analysis has detected Javascript issues.
Please read the issues below and remedy them.
All issue descriptions will yield results on Google, or contact your tech lead for help.

If you have "'variable' is not defined" then please fix it (your forgot to use 'var' or you have a typo).
In AMD there should be no global variables besides 'require' and 'define'.
☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠
</echo>
			<echo level="verbose">node ${jshint.executable} @{jsdir} --config ${jshintrc} --ignore-path ${jshintignore}</echo>
			<nodejs.exec cwd="${basedir}" failonerror="@{failonerror}">
				<arguments>
					<arg value="${jshint.executable}"/>
					<arg value="@{jsdir}"/>
					<arg value="--config"/>
					<arg value="${jshintrc}"/>
					<arg value="--ignore-path"/>
					<arg value="${jshintignore}"/>
				</arguments>
			</nodejs.exec>
		</sequential>
	</macrodef>

	<!--
		Does what "npm install" does.
	-->
	<macrodef name="npm.install">
		<attribute name="package" default="" description="The name of the package to install."/>
		<attribute name="cwd" default="${basedir}" description="The working directory"/>
		<attribute name="failonerror" default="false"/>
		<sequential>
			<local name="npm.command"/>
			<property name="npm.command" value="install"/>
			<echo level="verbose">npm ${npm.command} @{package}</echo>
			<npm.exec cwd="@{cwd}">
				<arg-elements>
					<arg value="${npm.command}"/>
					<arg value="@{package}"/>
				</arg-elements>
			</npm.exec>
		</sequential>
	</macrodef>

	<!--
	This macro knows how to call the npm executable on different platforms.
	It is primarily a helper for other macros in this library.

	Expects the following ant properties to be set:
		project.build.directory - the default working directory (target) - may be overriden with cwd arg
	-->
	<macrodef name="npm.exec">
		<attribute name="cwd" default="${basedir}" description="The working directory"/>
		<attribute name="failonerror" default="false"/>
		<element name="arg-elements" description="Ant 'arg' elements representing the args to pass to the npm command."/>
		<sequential>
			<local name="onwin"/>
			<property environment="env"/>
			<condition property="onwin">
				<os family="windows"/>
			</condition>
			<echo>
☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠
  If npm hangs then make sure you have set your ${user.home}/.npmrc file correctly.
☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠
			</echo>
			<nodejs.exec cwd="@{cwd}" failonerror="@{failonerror}">
				<arguments>
					<arg value="${npmjs.dir}/npm-cli.js"/>
					<arg-elements />
					<arg value="--loglevel"/>
					<arg value="${npm.loglevel}"/>
				</arguments>
			</nodejs.exec>
		</sequential>
	</macrodef>

	<!--
	This macro knows how to call the nodejs executable on different platforms.
	It is primarily a helper for other macros in this library.

	Expects the following ant properties to be set:
		nodejs.dir - the directory that contains the node executable
		project.build.directory - the default working directory (target) - may be overriden with cwd arg
	-->
	<macrodef name="nodejs.exec">
		<attribute name="cwd" default="${basedir}" description="The working directory"/>
		<attribute name="failonerror" default="false"/>
		<attribute name="spawn" default="false"/>
		<attribute name="outfile" default=""/>
		<element name="arguments" description="Ant 'arg' elements representing the args to pass to the nodejs command."/>
		<sequential>
			<local name="node.ok"/>
			<local name="nodejs.dir.location"/>
			<property environment="env"/>
			<property name="nodejs.dir.location" location="${nodejs.dir}"/>
			<condition property="node.ok">
				<available file="${nodejs.dir.location}" type="dir"/>
			</condition>
			<fail unless="node.ok">
				Could not find nodejs.
				Current value is: ${nodejs.dir.location}
			</fail>
			<if>
				<os family="windows"/>
				<then>
					<if>
						<equals arg1="@{outfile}" arg2=""/>
						<then>
							<exec dir="@{cwd}" executable="${nodejs.dir.location}/node" failonerror="@{failonerror}" spawn="@{spawn}">
								<env key="Path" path="${npmjs.dir};${nodejs.dir.location};${env.Path}"/>
								<arguments />
							</exec>
						</then>
						<else>
							<exec dir="@{cwd}" executable="${nodejs.dir.location}/node" failonerror="@{failonerror}" spawn="@{spawn}" output="@{outfile}" logError="yes">
								<env key="Path" path="${npmjs.dir};${nodejs.dir.location};${env.Path}"/>
								<arguments />
							</exec>
						</else>
					</if>
				</then>
				<else>
					<if>
						<equals arg1="@{outfile}" arg2=""/>
						<then>
							<exec dir="@{cwd}" executable="${nodejs.dir.location}/node" failonerror="@{failonerror}" spawn="@{spawn}">
								<env key="PATH" path="/usr/bin:${npmjs.dir}:${nodejs.dir.location}:${env.PATH}"/>
								<arguments />
							</exec>
						</then>
						<else>
							<exec dir="@{cwd}" executable="${nodejs.dir.location}/node" failonerror="@{failonerror}" spawn="@{spawn}" output="@{outfile}" logError="yes">
								<env key="PATH" path="/usr/bin:${npmjs.dir}:${nodejs.dir.location}:${env.PATH}"/>
								<arguments />
							</exec>
						</else>
					</if>
				</else>
			</if>
		</sequential>
	</macrodef>

	<!--
		General purpose way to invoke an executable.
	-->
	<macrodef name="wc.exec">
		<attribute name="executable" description="The path to the executable"/>
		<attribute name="cwd" default="${basedir}" description="The working directory"/>
		<attribute name="failonerror" default="false"/>
		<attribute name="spawn" default="false"/>
		<attribute name="needscmd" default="true"/>
		<element name="arguments" description="Ant 'arg' elements representing the args to pass to the command."/>
		<sequential>
			<if>
				<os family="windows"/>
				<then>
					<if>
						<equals arg1="@{needscmd}" arg2="true"/>
						<then>
							<exec dir="@{cwd}" executable="cmd" failonerror="@{failonerror}" spawn="@{spawn}">
								<env key="Path" path="${npmjs.dir};${nodejs.dir};${basedir}\node_modules\.bin;${env.Path}"/>
								<arg line="/c &quot;@{executable}&quot;"/>
								<arguments />
							</exec>
						</then>
						<else>
							<exec dir="@{cwd}" executable="@{executable}" failonerror="@{failonerror}" spawn="@{spawn}">
								<env key="Path" path="${npmjs.dir};${nodejs.dir};${basedir}\node_modules\.bin;${env.Path}"/>
								<arguments />
							</exec>
						</else>
					</if>

				</then>
				<else>
					<exec unless:set="onwin" dir="@{cwd}" executable="@{executable}" failonerror="@{failonerror}" spawn="@{spawn}">
						<env key="PATH" path="/usr/bin:${npmjs.dir}:${nodejs.dir}:${basedir}/node_modules/.bin:${env.PATH}"/>
						<arguments />
					</exec>
				</else>
			</if>
		</sequential>
	</macrodef>
</project>
