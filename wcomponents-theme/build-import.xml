<project name="ThemeBuildImports" xmlns:if="ant:if" xmlns:unless="ant:unless">
	<description>Common properties and macros needed for sub builds</description>

	<!--
		Some properties we do not want ANYONE to be able to override.
	-->
	<property name="build.number" value="${project.version}"/>
	<!--
		Per-user/per build overrides. See `user.xml` for some options.
	-->
	<import file="build-import-overrides.xml" optional="true"/>

  <basename property="impl.dir.name" file="${basedir}" />

  <!-- the source of the theme to be built. This will change if the theme inherits from another theme. -->
	<property name="impl.src.dir" location="${theme.impl.dir}"/>

	<!-- GLOBAL PROPERTIES: used in both input and output tasks -->
	<property name="tmp.dir" location="${theme.tmp.dir}"/>

	<property name="npm.loglevel" value="silent"/>

	<!-- OUTPUT PROPERTIES: relating to the artefacts generated by this build -->
	<property name="target.rootdir" location="${build.rootdir}/classes/theme/${impl.dir.name}"/>


	<!-- ENVIRONMENT PROPERTIES -->
	<property environment="env"/>
	<hostinfo/>

	<path id="project.class.path">
		<path path="${maven.plugin.classpath}"/>
	</path>
	<!-- TASKDEFS and MACRODEFS -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="project.class.path"/>
	<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="project.class.path"/>

	<!--
		Checks that all properties have been expanded during the build.
		Unexpanded properties are a common source of build errors so this
		is an important check.
	-->
	<target name="checkPropertiesExpanded">
		<path id="unexpanded.properties">
			<fileset dir="${build.rootdir}/classes/theme">
				<include name="**/*.js"/>
				<include name="**/*.css"/>
				<include name="**/*.xsl"/>
				<include name="**/*.xml"/>
				<include name="**/*.html"/>
				<include name="**/resource/*.mustache"/>
				<exclude name="**/lib/**"/>
				<exclude name="**/resource/*/**"/>
				<containsregexp expression="\$\{[^\}]+\}"/>
			</fileset>
		</path>
		<property name="unexpanded" refid="unexpanded.properties"/>
		<fail message="UNEXPANDED PROPERTIES FOUND: ${unexpanded}">
			<condition>
				<resourcecount when="greater" count="0" refid="unexpanded.properties" />
			</condition>
		</fail>
	</target>

	<!--
		Runs static analysis on javascript code.
		If you don't like the standard get in present arguments and we can look at changing it.
	-->
	<macrodef name="javascript.lint">
		<attribute name="jsdir" description="The directory that contains javascript to lint."/>
		<attribute name="failonerror" default="true"/>
		<sequential>
			<property name="jshint.executable" location="${basedir}/lintfile.js"/>
			<echo level="verbose">node ${jshint.executable} @{jsdir}</echo>
			<nodejs.exec cwd="${basedir}" failonerror="@{failonerror}">
				<arguments>
					<arg value="${jshint.executable}"/>
					<arg value="@{jsdir}"/>
				</arguments>
			</nodejs.exec>
		</sequential>
	</macrodef>


	<!--
	This macro knows how to call the npm executable on different platforms.
	It is primarily a helper for other macros in this library.

	Expects the following ant properties to be set:
		project.build.directory - the default working directory (target) - may be overriden with cwd arg
	-->
	<macrodef name="npm.exec">
		<attribute name="cwd" default="${basedir}" description="The working directory"/>
		<attribute name="failonerror" default="false"/>
		<element name="arg-elements" description="Ant 'arg' elements representing the args to pass to the npm command."/>
		<element name="env-elements" description="Ant 'env' elements representing the environment variables set for the npm command." optional="true"/>
		<sequential>
			<local name="onwin"/>
			<property environment="env"/>
			<condition property="onwin">
				<os family="windows"/>
			</condition>
			<echo>
☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠
  If npm hangs then make sure you have set your ${user.home}/.npmrc file correctly.
☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠ ☠
			</echo>
			<nodejs.exec cwd="@{cwd}" failonerror="@{failonerror}">
				<envs>
					<env-elements />
				</envs>
				<arguments>
					<arg value="${npmjs.dir}/npm-cli.js"/>
					<arg-elements />
					<arg value="--loglevel"/>
					<arg value="${npm.loglevel}"/>
				</arguments>
			</nodejs.exec>
		</sequential>
	</macrodef>

	<!--
	This macro knows how to call the nodejs executable on different platforms.
	It is primarily a helper for other macros in this library.

	Expects the following ant properties to be set:
		nodejs.dir - the directory that contains the node executable
		project.build.directory - the default working directory (target) - may be overriden with cwd arg
	-->
	<macrodef name="nodejs.exec">
		<attribute name="cwd" default="${basedir}" description="The working directory"/>
		<attribute name="failonerror" default="false"/>
		<attribute name="spawn" default="false"/>
		<attribute name="outfile" default=""/>
		<element name="arguments" description="Ant 'arg' elements representing the args to pass to the nodejs command."/>
		<element name="envs" description="Ant 'env' elements representing the environment variables set for the nodejs command." optional="true"/>
		<sequential>
			<local name="node.ok"/>
			<local name="nodejs.dir.location"/>
			<property environment="env"/>
			<property name="nodejs.dir.location" location="${nodejs.dir}"/>
			<condition property="node.ok">
				<available file="${nodejs.dir.location}" type="dir"/>
			</condition>
			<fail unless="node.ok">
				Could not find nodejs.
				Current value is: ${nodejs.dir.location}
			</fail>
			<if>
				<os family="windows"/>
				<then>
					<if>
						<equals arg1="@{outfile}" arg2=""/>
						<then>
							<exec dir="@{cwd}" executable="${nodejs.dir.location}/node" failonerror="@{failonerror}" spawn="@{spawn}">
								<env key="Path" path="${npmjs.dir};${nodejs.dir.location};${env.Path}"/>
								<envs />
								<arguments />
							</exec>
						</then>
						<else>
							<exec dir="@{cwd}" executable="${nodejs.dir.location}/node" failonerror="@{failonerror}" spawn="@{spawn}" output="@{outfile}" logError="yes">
								<env key="Path" path="${npmjs.dir};${nodejs.dir.location};${env.Path}"/>
								<envs />
								<arguments />
							</exec>
						</else>
					</if>
				</then>
				<else>
					<if>
						<equals arg1="@{outfile}" arg2=""/>
						<then>
							<exec dir="@{cwd}" executable="${nodejs.dir.location}/node" failonerror="@{failonerror}" spawn="@{spawn}">
								<env key="PATH" path="/usr/bin:/Users/rick/webdriver:${npmjs.dir}:${nodejs.dir.location}:${env.PATH}"/>
								<envs />
								<arguments />
							</exec>
						</then>
						<else>
							<exec dir="@{cwd}" executable="${nodejs.dir.location}/node" failonerror="@{failonerror}" spawn="@{spawn}" output="@{outfile}" logError="yes">
								<env key="PATH" path="/usr/bin:/Users/rick/webdriver:${npmjs.dir}:${nodejs.dir.location}:${env.PATH}"/>
								<envs />
								<arguments />
							</exec>
						</else>
					</if>
				</else>
			</if>
		</sequential>
	</macrodef>

	<!--
		General purpose way to invoke an executable.
	-->
	<macrodef name="wc.exec">
		<attribute name="executable" description="The path to the executable"/>
		<attribute name="cwd" default="${basedir}" description="The working directory"/>
		<attribute name="failonerror" default="false"/>
		<attribute name="spawn" default="false"/>
		<attribute name="needscmd" default="true"/>
		<element name="arguments" description="Ant 'arg' elements representing the args to pass to the command."/>
		<sequential>
			<if>
				<os family="windows"/>
				<then>
					<if>
						<equals arg1="@{needscmd}" arg2="true"/>
						<then>
							<exec dir="@{cwd}" executable="cmd" failonerror="@{failonerror}" spawn="@{spawn}">
								<env key="Path" path="${npmjs.dir};${nodejs.dir};${basedir}\node_modules\.bin;${env.Path}"/>
								<arg line="/c &quot;@{executable}&quot;"/>
								<arguments />
							</exec>
						</then>
						<else>
							<exec dir="@{cwd}" executable="@{executable}" failonerror="@{failonerror}" spawn="@{spawn}">
								<env key="Path" path="${npmjs.dir};${nodejs.dir};${basedir}\node_modules\.bin;${env.Path}"/>
								<arguments />
							</exec>
						</else>
					</if>

				</then>
				<else>
					<exec unless:set="onwin" dir="@{cwd}" executable="@{executable}" failonerror="@{failonerror}" spawn="@{spawn}">
						<env key="PATH" path="/usr/bin:${npmjs.dir}:${nodejs.dir}:${basedir}/node_modules/.bin:${env.PATH}"/>
						<arguments />
					</exec>
				</else>
			</if>
		</sequential>
	</macrodef>
</project>
