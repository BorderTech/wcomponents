<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<artifactId>wcomponents-theme</artifactId>

	<parent>
		<groupId>com.github.bordertech.wcomponents</groupId>
		<artifactId>wcomponents-parent</artifactId>
		<version>1.5.17-SNAPSHOT</version>
	</parent>

	<packaging>jar</packaging>

	<description>
		Core client-side WComponents.
	</description>

	<properties>
		<theme.skip.antrun>false</theme.skip.antrun>
		<sonar.sources>src/main</sonar.sources>
		<mvn.repo.url>http://repo.maven.apache.org/maven2</mvn.repo.url>
		<npm.registry.url>https://registry.npmjs.org/</npm.registry.url>
		<node.download.root>http://nodejs.org/dist/</node.download.root>
		<npm.download.root>http://registry.npmjs.org/npm/-/</npm.download.root>
		<nodejs.dist.dir>${project.build.directory}/nodejsdist</nodejs.dist.dir><!-- The nodejs binaries get unpacked to here -->
		<nodejs.dir>${basedir}/node</nodejs.dir><!-- Where we expect to find Node installed -->
		<nodejs.version>v10.16.3</nodejs.version><!-- the version of node to be installed -->
		<npmjs.dir>${nodejs.dir}/node_modules/npm/bin</npmjs.dir><!-- Where we expect to find NPM installed -->
		<npmjs.version>6.9.0</npmjs.version><!-- the version of npm to be installed - should be the version that goes with your version of node -->
	</properties>
	<name>wcomponents-theme</name>
	<build>
		<plugins>
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>3.1.1</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<ignoreMissingDescriptor>true</ignoreMissingDescriptor>
					<descriptors>
						<descriptor>sources.xml</descriptor>
					</descriptors>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>compile</id>
						<phase>compile</phase>
						<configuration>
							<skip>${theme.skip.antrun}</skip>
							<target name="build" description="Builds XSLT artifacts">
								<property name="tmp.dir" location="${java.io.tmpdir}${file.separator}wcomponents-theme-tmp"/>
								<property name="target.rootdir" location="${project.build.directory}/classes/theme/${project.name}"/>
								<basename property="impl.dir.name" file="${basedir}" />

								<concat destfile="${tmp.dir}/all-int.xsl" fixlastline="yes" ignoreempty="false">
									<header filtering="no">&lt;concat&gt;</header>
									<footer filtering="no">&lt;/concat&gt;</footer>
									<fileset dir="${project.basedir}/src/main/xslt" includes="*.xsl"/>
								</concat>
								<copy file="${project.basedir}/scripts/build_all.xsl" todir="${tmp.dir}" overwrite="true"/>
								<xslt in="${tmp.dir}/all-int.xsl"
									out="${target.rootdir}/xslt/all.xsl"
									style="${tmp.dir}/build_all.xsl">
									<factory name="net.sf.saxon.TransformerFactoryImpl"/>
								</xslt>
								<copy file="${target.rootdir}/xslt/all.xsl"
									tofile="${target.rootdir}/xslt/all_debug.xsl"/>
								<replaceregexp file="${target.rootdir}/xslt/all_debug.xsl"
									match="xsl:param name=&quot;isDebug&quot; select=&quot;0&quot;"
									replace="xsl:param name=&quot;isDebug&quot; select=&quot;1&quot;"/>
								<echo level="verbose" message="Done XSLT"/>
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>net.sf.saxon</groupId>
						<artifactId>Saxon-HE</artifactId>
						<version>9.9.1-1</version>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<groupId>com.github.eirslett</groupId>
				<artifactId>frontend-maven-plugin</artifactId>
				<version>1.8.0</version>
				<configuration>
					<workingDirectory>${basedir}</workingDirectory>
				</configuration>
				<executions>
					<execution>
						<id>install node and npm</id>
						<goals>
							<goal>install-node-and-npm</goal>
						</goals>
						<phase>generate-resources</phase>
						<configuration>
							<skip>${theme.skip.antrun}</skip>
							<nodeVersion>${nodejs.version}</nodeVersion>
							<npmVersion>${npmjs.version}</npmVersion>
							<!--
								This will only work if the nodejs binaries are unpacked first (see the execution with ID "unpack-nodejs").
							-->
							<nodeDownloadRoot>${node.download.root}</nodeDownloadRoot>
							<npmDownloadRoot>${npm.download.root}</npmDownloadRoot>
						</configuration>
					</execution>
					<execution>
						<id>npm install</id>
						<goals>
							<goal>npm</goal>
						</goals>
						<configuration>
							<skip>${theme.skip.antrun}</skip>
						</configuration>
					</execution>
					<execution>
						<id>npm version</id>
						<goals>
							<goal>npm</goal>
						</goals>
						<configuration>
							<skip>${theme.skip.antrun}</skip>
							 <arguments>version ${project.version} --allow-same-version true</arguments>
						</configuration>
					</execution>
					<execution>
						<id>npm run build</id>
						<phase>compile</phase>
						<goals>
							<goal>npm</goal>
						</goals>
						<configuration>
							<skip>${theme.skip.antrun}</skip>
							 <arguments>run build</arguments>
						</configuration>
					</execution>
					<execution>
						<id>npm run test</id>
						<phase>test</phase>
						<goals>
							<goal>npm</goal>
						</goals>
						<configuration>
							<skip>${theme.skip.antrun}</skip>
							 <arguments>run test</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
