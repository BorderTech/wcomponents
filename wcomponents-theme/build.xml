<project name="themes_build" default="build" xmlns:if="ant:if" xmlns:unless="ant:unless">
	<!--
	This is the main build file for the WComponent themes.

	WARNING! DO NOT CALL ANT TARGETS DIRECTLY! USE MAVEN INSTEAD!
	We use maven to fetch dependencies and set up the classpath.
	The build will not work if you try to run it directly thru ant.

	The main targets of interest are: "build", "test" and "clean".

	-->
	<import file="build-import.xml"/>

	<target name="clean"
			depends="cleanTmpDir"
			description = "This target cleans all built output for the themes.">
		<delete dir="${build.rootdir}"/>
	</target>

	<target name="checkImplExists">
		<!--
			This check should happen as early as possible BUT it should happen after clean tasks have been called
			in case the implementation directory is cleaned away (i.e. it is located in the temporary directory).
		-->
		<available file="${impl.src.dir}" type="dir" property="impl.dir.present"/>
	</target>

	<target name="cleanTmpDir">
      <delete dir="${tmp.dir}" failonerror="true"/>
	</target>

	<target name="cleanupOptional" unless="build.preserve.tmp.onexit">
		<delete dir="${tmp.dir}" failonerror="false"/>
	</target>

	<target name="init" depends="cleanTmpDir, checkImplExists, failNoThemePresent">
		<mkdir dir="${build.rootdir}/classes/theme"/>
		<echo level="info">Build properties can be overriden in any of the following locations (in order of decreasing priority):
  *  ${user.home}/.wc/${user.name}.xml (in user home dir)
  *  ${user.home}/.wc/wc_theme_build_properties.xml (in user home dir)
  *  ${component.rootdir}/${user.name}.xml (in the project root dir)
  *  ${component.rootdir}/wc_theme_build_properties.xml (in the project root dir)</echo>
		<!-- We create this package.json file so that we can install node modules locally -->
		<echo force="true" file="${basedir}/.npmrc"># This is a per-project .npmrc file.
# Do not add this file to source control!
# This file is automatically generated and/or overwritten EVERY BUILD!
# Why?
# Since users do not need NPM installed to run these builds we cannot assume they have an .npmrc file.
# This also allows the builds to run on CI or build servers without having to maintain .npmrc on those machines.
# Registry URL property = npm.registry.url
registry=${npm.registry.url}
strict-ssl=false

</echo>
		<if>
			<isset property="mirror.root"/>
			<then>
				<echo append="true" file="${basedir}/.npmrc">
chromedriver_cdnurl=${mirror.root}/chromedriver

				</echo>
			</then>
		</if>
		<copy file="${component.rootdir}/unbuilt.package.json" tofile="${basedir}/package.json" overwrite="true">
			<filterchain>
				<expandproperties/>
			</filterchain>
		</copy>
    <npm.install/>
	</target>

	<target name="failNoThemePresent" unless="impl.dir.present">
		<fail>Requested custom theme does not exist. Tried: ${impl.src.dir}</fail>
	</target>

	<target name="test" depends="checkImplExists, failNoThemePresent" description = "This target runs the unit tests for the themes.">
			<if>
				<not>
					<!--
						Note: this property will only ever be passed in by the maven pom.
						It is ultimately driven by the skipOptionalTests property in the
						parent maven pom (the top level pom in WComponents).
						It allows "flaky" tests (selenium, jsTestDriver, anything that depends
						on browsers) to be skipped on the build box.
					-->
					<equals arg1="${theme.skip.tests}" arg2="true"/>
				</not>
				<then>
            <initImplTmpDir />
            <callant antFile="build-test.xml" target="test"/>
				</then>
				<else>
					<echo level="info">theme.skip.tests is 'true' so not executing test</echo>
				</else>
			</if>
		<antcall target="cleanupOptional"/>
	</target>

	<target name="document" description="This target runs the JSDoc build for the default theme.">
		<stopwatch name="node-jsdoc" action="start"/>
		<echo level="verbose">./node/node ./node_modules/jsdoc/jsdoc.js -c jsdoc.config.json</echo>
		<nodejs.exec failonerror="false" cwd="${basedir}">
			<arguments>
				<arg value="${basedir}/node_modules/jsdoc/jsdoc.js"/>
				<arg value="-c"/>
				<arg value="jsdoc.config.json"/>
			</arguments>
		</nodejs.exec>
		<stopwatch name="node-jsdoc" action="total"/>
	</target>


	<target name="build"
		description="This target builds the themes."
		depends="failWrongAnt, init">
    <if>
      <and>
        <isset property="theme.inherit"/>
        <not>
          <equals arg1="${theme.inherit}" arg2="" />
        </not>
      </and>
      <then>
        <echo level="verbose" message = "Attempting to merge ${impl.dir.name} with parent theme ${theme.inherit}"/>
        <mergeSubImpl />
      </then>
    </if>
    <echo level="info">************************ BUILDING ${impl.dir.name} ************************</echo>
    <initImplTmpDir />
    <callant antFile="build-images.xml" target="build"/>
    <callant antFile="build-resource.xml" target="build"/>
    <callant antFile="build-css.xml" target="build"/><!-- build after images -->
    <callant antFile="build-i18n.xml" target="build"/>
    <callant antFile="build-xslt.xml" target="build"/>
    <callant antFile="build-js.xml" target="build"/>
    <writeVersionInfo implName="${impl.dir.name}"/>
    <antcall target="checkPropertiesExpanded"/>
		<antcall target="cleanupOptional"/>
	</target>

	<!--
		Takes care of implementation "inheritance". NOTE: only one level of inheritance is allowed and I don't see that changing.
	-->
	<macrodef name="mergeSubImpl">
		<sequential>
      <echo level="verbose" message="merging ${impl.dir.name} with parent theme ${theme.inherit}"/>
			<var name="prototype.dir" unset="true"/>

      <echo level="verbose" message="Attempting to find parent theme ${theme.inherit}"/>
      <if>
        <and>
          <available file="${theme.inherit}" type="file"/>
          <matches string="${theme.inherit}" pattern="\.zip$" casesensitive="false"/>
        </and>
        <then>
          <echo level="verbose" message="Found prototype zip file ${theme.inherit}"/>
          <property name="prototype.dir" location="${tmp.dir}/parent"/>
          <delete dir="${prototype.dir}"/>
          <!-- unzip the zip and set the path -->
          <unzip src="${theme.inherit}" dest="${prototype.dir}" overwrite="true" failOnEmptyArchive="true">
            <patternset>
              <include name="*/**"/>
            </patternset>
          </unzip>
        </then>
        <elseif>
          <and>
            <matches string="${theme.inherit}" pattern="\/"/>
            <available file="${theme.inherit}" type="dir"/>
          </and>
          <then>
            <property name="prototype.dir" location="${theme.inherit}"/>
            <echo level="verbose" message="Found prototype directory named for ${theme.inherit} in ${prototype.dir}"/>
          </then>
        </elseif>
        <elseif>
          <and>
            <isset property="theme.inheritance.dir"/>
            <not>
              <equals arg1="${theme.inheritance.dir}" arg2=""/>
            </not>
            <available file="${theme.inheritance.dir}/${theme.inherit}" type="dir"/>
          </and>
          <then>
            <property name="prototype.dir" location="${theme.inheritance.dir}/${theme.inherit}"/>
            <echo level="verbose" message="Using prototype {theme.inheritance.dir}/${theme.inherit}"/>
          </then>
        </elseif>
        <else>
          <fail message="Could not find prototype implementation ${theme.inherit}"/>
        </else>
      </if>
			<if>
				<and>
					<isset property="prototype.dir"/>
					<available file="${prototype.dir}" type="dir"/>
				</and>
				<then>
          <var name="merge.impl.dir" unset="true"/>
          <property name="merge.impl.dir" location="${tmp.dir}/implementations/${impl.dir.name}"/>
          <delete dir="${merge.impl.dir}"/>
					<echo level="verbose">Copying parent implementation files from ${prototype.dir}/src/main to ${merge.impl.dir}/src/main</echo>
					<copy todir="${merge.impl.dir}/src/main">
						<fileset dir="${prototype.dir}/src/main" includes="**">
							<exclude name="**/.sass-cache/**"/>
            </fileset>
					</copy>

					<echo level="verbose">Copying sub-implementation files from ${impl.src.dir}/src/main to ${merge.impl.dir}/src/main</echo>
					<copy todir="${merge.impl.dir}/src/main" overwrite="true">
						<fileset dir="${impl.src.dir}/src/main" includes="**">
							<exclude name="**/.sass-cache/**"/>
						</fileset>
					</copy>
          <var name="impl.src.dir" unset="true"/>
          <property name="impl.src.dir" location="${merge.impl.dir}"/>
				</then>
				<elseif>
					<isset property="prototype.dir"/>
					<then>
						<fail message="Could not find prototype directory ${prototype.dir}"/>
					</then>
				</elseif>
			</if>
      <var name="theme.inherit" unset="true"/>
		</sequential>
	</macrodef>

	<target name="antCheck">
		<echo message="ant.version=${ant.version}" />
		<antversion property="antversion" atleast="1.8.2"/>
	</target>

	<target name="failWrongAnt" unless="antversion" depends="antCheck">
		<fail>Use Ant 1.8.2 or newer</fail>
	</target>

	<macrodef name="callant">
		<attribute name="antFile"/>
		<attribute name="target"/>
		<sequential>
			<stopwatch name="@{antFile}" action="start"/>
			<ant antfile="${component.rootdir}/@{antFile}" inheritAll="false" target="@{target}">
				<property name="component.rootdir" location="${component.rootdir}"/>
				<property name="maven.plugin.classpath" value="${maven.plugin.classpath}"/>
				<property name="basedir" location="${basedir}"/>
				<property name="build.number" value="${project.version}"/>
				<property name="build.rootdir" location="${theme.target.dir}"/>
				<property name="theme.skip.tests" value="${skipOptionalTests}"/>
				<property name="impl.src.dir" value="${impl.src.dir}"/>
				<property name="implementation.name" value="${impl.dir.name}"/>
				<property name="tmp.dir" location="${impl.tmp.dir}"/>
				<property name="nodejs.dir" location="${nodejs.dir}"/>
				<property name="npmjs.dir" location="${npmjs.dir}"/>
				<property name="npm.registry.url" value="${npm.registry.url}"/>
				<property name="phantomjs.binary" value="${phantomjs.binary}"/>
				<property name="i18n.resources.dir" location="${i18n.resources.dir}"/>
				<property name="i18n.unpack.dir" location="${i18n.unpack.dir}"/>
				<property name="rjs.log.level" value="${rjs.log.level}" />
				<property name="sass-lint-config" location="${sass-lint-config}"/>
			</ant>
			<stopwatch name="@{antFile}" action="total"/>
		</sequential>
	</macrodef>

	<macrodef name="test">
		<sequential>
			<if>
				<not>
					<!--
						Note: this property will only ever be passed in by the maven pom.
						It is ultimately driven by the skipOptionalTests property in the
						parent maven pom (the top level pom in WComponents).
						It allows "flaky" tests (selenium, jsTestDriver, anything that depends
						on browsers) to be skipped on the build box.
					-->
					<equals arg1="${theme.skip.tests}" arg2="true"/>
				</not>
				<then>
            <initImplTmpDir />
            <callant antFile="build-test.xml" target="test"/>
				</then>
				<else>
					<echo level="info">theme.skip.tests is 'true' so not executing test</echo>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="initImplTmpDir">
		<sequential>
			<var name="impl.tmp.dir" unset="true"/>
			<property name="impl.tmp.dir" location="${tmp.dir}/${impl.dir.name}"/>
			<mkdir dir="${impl.tmp.dir}"/>
		</sequential>
	</macrodef>

	<macrodef name="writeVersionInfo">
		<!--
			This is largely superfluous and a legacy of debugging builds many years in the past.
			It used to dump many different properties.
			HOWEVER one part of it has found new life (in ThemeUtils.java) and therefore this
			file must continue to:

			1. Be named version.properties
			2. Dump the "build.number" property.

			TODO can we ditch this entirely?
		-->
		<attribute name="implName"/>
		<sequential>
			<echo file="${build.rootdir}/classes/theme/@{implName}/version.properties">build.number=${build.number}</echo>
		</sequential>
	</macrodef>
</project>
