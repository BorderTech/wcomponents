/**
 * This loader plugin module determines the the dependencies we need to load the configure JS environment with the necessary
 * features expected by the rest of the codebase, i.e. polyfills.
 *
 * It is intended that this loader plugin will be a loader dependency <http://requirejs.org/docs/api.html#config-deps>
 * it **must** run before other modules because it loads the compatibility modules and fixes required for
 * this browser to handle the rest of the codebase.
 *
 * You **must not** load anything here that needs to wire up events (those are fixes, not compatibility
 * code). This is for basic scripting API support.
 *
 * Many of the tests are written by us for our own specific needs however some are also lifted with little or no
 * change from the has project: <https://github.com/phiggins42/has.js/>
 *
 * Read the source Luke!
 *
 * @module
 * @private
 * @param has @ignore
 */
define(["wc/has"], function(has) {
	"use strict";
	var result = ["lib/dojo/sniff"];

	(function(addtest) {

		addtest("activex", function(g) {
			return ("ActiveXObject" in g);
		});

		addtest("flash", function(g) {
			var flashPlayer, hasFlash = false;
			if (has("activex")) {
				try {
					flashPlayer = new window.ActiveXObject("ShockwaveFlash.ShockwaveFlash");
					if (flashPlayer) {
						hasFlash = true;
					}
				} catch (ignore) {
					// ignore
				}
			}
			hasFlash = hasFlash || g.navigator && g.navigator.plugins && g.navigator.plugins["Shockwave Flash"];
			return hasFlash;
		});

		addtest("formdata", function(g) {
			return "FormData" in g;
		});

		addtest("draganddrop", function(g, d, el) {
			return "draggable" in el;
		});

		addtest("native-console", function(g) {
			return ("console" in g);
		});

		addtest("native-console-debug", function(g) {
			return (has("native-console") && "debug" in g.console);
		});

		addtest("native-console-time", function(g) {
			return (has("native-console") && "time" in g.console);
		});

		addtest("native-console-group", function(g) {
			return (has("native-console") && "group" in g.console);
		});

		addtest("native-console-table", function(g) {
			return (has("native-console") && "table" in g.console);
		});

		addtest("global-performance", function(g) {
			return (("performance" in g) && !!g.performance);  // will be present but null in FF 17 if page generated by XSLT
		});

		addtest("global-performance-marking", function(g) {
			return (has("global-performance") && "mark" in g.performance);
		});

		addtest("dom-canvas", function(g, d) {
			var e = d.createElement("canvas");
			return !!(e.getContext && e.getContext("2d"));
		});

		addtest("object-assign", function(g) {
			return (typeof g.Object.assign === "function");
		});

		addtest("string-repeat", function() {
			return !!String.prototype.repeat;
		});

		addtest("element-datalist", function() {
			return "list" in document.createElement("input");
		});

		addtest("element-details", function() {
			return "open" in document.createElement("details");
		});

		addtest("css-flex", function(g, d) {
			var c,
				start,
				end;
			if (!g.getComputedStyle) {
				return false;
			}
			c = d.createElement("div");
			try {
				d.body.appendChild(c);
				start = g.getComputedStyle(c, null).display;
				c.style.display = "flex";
				end = g.getComputedStyle(c, null).display;
				return (start !== end);
			} catch (e) {
				return false;
			} finally {
				d.body.removeChild(c);
			}
		});

		addtest("native-dateinput", function() {
			var el,
				d = "date",
				res = false;
			try {
				el = document.createElement("input");
				el.type = d;
				res = d === el.type;
			} catch (e) {
				res = false;
			}
			return res;
		});

		addtest("rtc-gum", function(g) {
			var i, next, props = ["getUserMedia", "webkitGetUserMedia", "mozGetUserMedia", "msGetUserMedia"];
			for (i = 0; i < props.length; i++) {
				next = props[i];
				if ((g.navigator.mediaDevices && g.navigator.mediaDevices[next]) || g.navigator[next]) {
					return true;
				}
			}
			return false;
		});
	})(has.add);

	// ALWAYS FETCH
	// as little as possible

	// CONDITIONALLY FETCH

	/*
	 * The polyfill for global performance gets loaded up too late to attach load event listeners.
	 * Putting it into wc/fixes gets loaded up too late to attach load event listeners. They have
	 * to be here whether we like it or not. This fix is ONLY needed for IE versions which do not
	 * have globel performance.
	 */
	if (!(has("global-performance") || has("dom-addeventlistener"))) {
		window.attachEvent("onload", function() {
			if (window.requirejs) {
				window.requirejs.config({config: {"wc/compat/navigationTiming": {
					"loadEventStart": ((new Date()) * 1),/* NOTE: our polyfill of Date.now() has not yet loaded */
					"loadEventEnd": ((new Date()) * 1)}}});
			}
		});
	}

	result.load = function (id, parentRequire, callback) {
		parentRequire(result, callback);
	};
	return result;
});
