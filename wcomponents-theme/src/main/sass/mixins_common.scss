// Allow Vendor Prefix in mixins.
//scss-lint:disable VendorPrefix

@import 'vars_all.scss';
@import 'mixins_flex.scss'; // flex layouts
@import 'mixins_respond.scss'; // responsive design media queries

/// Set the elements text-align property. I am not convinced this is a useful mixin.
/// @param {alignment} $align [$preferred-alignment] The horizontal alignment to set.
@mixin align($align: $preferred-alignment) {
	text-align: $align;
}

/// Style disabled controls. This allows similar styling of elements which are able to be disabled using the disabled
/// attribute and those which require aria-disabled.
///
/// We do not set disabled background here. This is due to the overwheening complexities of overrides and the
/// unfortunate effect of setting background-color on elements which have appearance: button.
@mixin aria-disabled {
	// important to reset menu button etc rules which are VERY specific
	// scss-lint:disable ImportantRule
	color: $wc-ui-color-disabled-fg; // NOTE for your own sanity do not set background-color here
	cursor: default !important;
	outline: none !important;
	text-decoration: none !important;
}

/// Add a background-image to almost anything. The default for this macro will add a small, centered,
///   non-repeateing background image to the element.
///
/// @param {string} $url The URL of your image.
/// @param {dimension} $height [$line-size] The vertical aspect of background-size. Set -1 to omit the background-size rule.
/// @param {repetition} $repeat [no-repeat] The repeat rule for your image.
/// @param {dimension} $width [$line-size] The horizontal aspect of background-size. Set -1 to omit the background-size rule.
/// @param {position|dimension} $x [50%] The x-position aspect of background-position. The background-position rule is
/// omitted if both $x and $y are 0.
/// @param {position|dimension} $y [50%] The y-position aspect of background-position. The background-position rule is
/// omitted if both $x and $y are 0.
/// @param {boolean|position|dimension} $reset-size [-1]. Include a large screen media query to reset background size.
/// If true then reset to 1em x 1em as a shorthand for the default size. Omitted if this is -1 or if background-size is not set.
@mixin background-image ($url, $height: $line-size, $repeat: no-repeat, $width: $line-size, $x: 50%, $y: 50%, $reset-size: -1) {
	background-image: url($url);
	@if ($x != 0 or $y != 0) {
		background-position: $x $y;
	}
	@if($repeat != repeat) {
		background-repeat: $repeat;
	}
	@if($height == contain or $width == contain) {
		background-size: contain;
	}
	@else if($height == cover or $width == cover) {
		background-size: cover;
	}
	@else if($height != -1 and $width != -1) {
		background-size: $width $height;
		@if($reset-size == true) {
			@include reset-large-screen {
				background-size: 1em 1em;
			}
		}
		@else if($reset-size != -1) {
			@include reset-large-screen {
				background-size: $reset-size;
			}
		}
	}
	@content;
}

/// Add a scaled, centred background-image (as an icon). This is basically a cut-down version of the background-image
/// mixin for adding iconic images to things (usually buttons). The image is always a square of edge length $line-size.
/// It is reset to 1em square on large screens.
/// @todo Delete this and replace calls with a call directly to background-image.
///
/// @param {string} $url The URL of your image.
/// @param {position|dimension} $x [50%] The x-position aspect of background-position. The background-position rule is
///   omitted if both $x and $y are 0.
/// @param {position|dimension} $y [50%] The y-position aspect of background-position. The background-position rule is
///   omitted if both $x and $y are 0.
@mixin background-image-icon ($url, $x: 50%, $y: 50%) {
	@include background-image($url: $url, $x: $x, $y: $y, $reset-size: 1em);
}

/// Set simple border styles. Using $width = 0 will unset a border.
/// @param {String} $pos [all] The border to set. one of 'all' or a border gragment 'top', 'right', 'bottom' or 'left'.
///   When set to 'all' a complete border is set, otherwise only the element edge specified by this param.
/// @param {color} $color [$wc-ui-color-border] The color of the border. Ignored if $width is 0.
/// @param {border-style} $style [$border-style] The style of the border. Ignored if $width is 0.
/// @param {dimension} $width [$border-width] The width of the border. If 0 then the border will be unset and its style set to none.
@mixin border($pos: all, $color: $wc-ui-color-border, $style: $border-style, $width: $border-width) {
	@if ($pos == all) {
		@if ($width == 0) {
			border: 0 none;
		}
		@else {
			border: $width $style $color;
		}
	}
	@else if ($width == 0) {
		border-#{$pos}: 0 none;
	}
	@else {
		border-#{$pos}: $width $style $color;
	}
}

/// Set an element's box-sizing to border-box.
@mixin border-box {
	// Require -moz-box-sizing for consistency
	// scss-lint:disable VendorPrefix
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}

/// Style a button with a (usually) transparent background. Handy for holding iconography! The default call to this
/// mixin will style a button to:
///
/// * be a fixed square size eqivalent to the default line size;
/// * have a small amount of padding on all sides;
/// * will have a box-model of content-box;
/// * will inherit font styles;
/// * have a standard border on all sides (see the border mixin);
/// * have center text-alignment;
/// * will reset the linear dimensions from $line-size to 1em using the reset-large-screen mixin;
/// * then apply content.
///
/// @param {color} $background [transparent] Set the button background. Set -1 to ignore this rule.
/// @param {boolean|int} $border [true] If true then the border mixin is called with no params (get a default border).
///   Set false to not include the standard border mixin. Set to any non-negative integer to create a stabdard coloured
///   border of the required width. If you want a non-standard border set false and use the border mixin by itself.
/// @param {dimension} $height [$line-size] The height of the button. Set -1 to omit this rule.
/// @param {dimension} $padding [1em] The padding of the button. Set -1 to omit this rule.
/// @param {position} $text-align [center] The text align for your button. Set '' to omit this rule.
/// @param {dimension} $width [$line-size] The width of the button. Set -1 to omit this rule.
@mixin button ($background: transparent, $border: true, $height: $line-size, $padding: $hgap-small, $text-align: center, $width: $line-size, $reset-height: 1em, $reset-width: 1em) {
	@if ($border == true) {
		@include border;
	}
	@else if ($border != false) {
		@include border ($width: $border);
	}
	@if($background != -1) {
		background-color: $background;
	}
	// need this for Firefox
	// scss-lint:disable VendorPrefix
	-moz-box-sizing: content-box;
	// scss-lint:enable VendorPrefix
	box-sizing: content-box;
	font: inherit; // we really need this to make icon buttons behave
	@if ($height != -1) {
		height: $height;
	}
	@if ($padding != -1) {
		padding: $padding;
	}
	@if($text-align != '') {
		text-align: $text-align;
	}
	@if ($width != -1) {
		width: $width;
	}

	@if($reset-width != -1 or $reset-height != -1) {
		@include reset-large-screen {
			@if($reset-height != -1) {
				height: $reset-height;
			}
			@if($reset-width != -1) {
				width: $reset-width;
			}
		}
	}
	@content;
}

// Allow duplicate width declarations
// scss-lint:disable DuplicateProperty
/// Size a container to fit its content.
@mixin fit-content {
	width: auto;
	width: -webkit-fit-content;
	width: -moz-fit-content;
	width: fit-content;
}
// scss-lint:enable DuplicateProperty

/// Makes a square box (for exampe to put a 100% scaled SVG in).
/// @param {display} $display [inline-block] How you want your box to display.
/// @param {dimension} $height [$line-size] The height of the box. Set auto to omit this rule.
/// @param {dimension} $width [$line-size] The width of the box. Set auto to omit this rule.
@mixin make-box($display: inline-block, $height: $line-size, $width: $line-size) {
	display: $display;
	@if ($height != auto) {
		height: $height;
	}
	@if ($width != auto) {
		width: $width;
	}
}

/// Show the mandatory indicator
/// @todo: make the mandatory indicator string into a var.
@mixin mandatory-indicator {
	color: $wc-ui-color-required-marker;
	content: '*';
}

/// Apply a simple margin to an element.
/// @param {String} $pos [all] Where to apply the margin. If 'all' then the margin is placed around all sides of the
/// element; otherwise any one of top, right, bottom, left to set a margin only on that side of the element.
/// @param {dimension} $size [$hgap-small] The size of the margin to apply.
@mixin margin ($pos: all, $size: $hgap-small) {
	@if ($pos == all) {
		margin: $size;
	}
	@else {
		margin-#{$pos}: $size;
	}
}

// Allow duplicate width declarations
// scss-lint:disable DuplicateProperty
/// Size a container to fit its max-content.
@mixin max-content {
	width: auto;
	width: -webkit-max-content;
	width: -moz-max-content;
	width: max-content;
}

/// Size a container to fit its min-content.
@mixin min-content {
	width: auto;
	width: -webkit-min-content;
	width: -moz-min-content;
	width: min-content;
}
// scss-lint:enable DuplicateProperty

/// Move an element out of viewport.
@mixin offscreen {
	// Require important to ensure we are really off screen
	// scss-lint:disable ImportantRule
	left: -9999px !important;
	overflow: hidden !important;
	position: absolute !important;
}

/// Set an outline on an element. Outlines may be better than borders for transient effects.
/// The default call will create an outline with the following propoerties:
/// * colour - default border colour;
/// * style - solid;
/// * width - default border width;
/// * offset - 0.
/// @param {color} $color [$wc-ui-color-border] The color of the outline.
/// @param {outline-style} $style [solid] The style of the outline.
/// @param {dimension} $width [$border-width] the width of the outline.
/// @param {int} $offset [0] The outline offset (if any).
@mixin outline($color: $wc-ui-color-border, $style: solid, $width: $border-width, $offset: 0) {
	outline: $width $style $color;
	@if ($offset != 0) {
		outline-offset: $offset;
	}
}

/// Make a container into a simple padded box with a standard border.
/// @param {dimaension} $pad [$hgap-normal] The amount of padding.
/// @param {color} $border [$wc-ui-color-border] The border color.
@mixin padded-box($pad: $hgap-normal, $border: $wc-ui-color-border) {
	@include border($color: $border);
	padding: $pad;
}

/// Use the symbol font as the font family for the element.
@mixin use-symbol-font {
	font-family: $symbol-font;
}
