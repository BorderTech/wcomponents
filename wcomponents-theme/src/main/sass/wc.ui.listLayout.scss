/* wc.ui.listLayout.scss */

// NOTE: we do not output the separator as a class when the list is ordered.
@import 'mixins_common.scss';

.listLayout {
	margin: 0;
	padding: 0;

	&.dot {
		margin-left: $list-layout-dot-spacing;

		&.flat {
			margin-left: 0;
		}
	}

	&.none,
	&.flat,
	&.bar {
		list-style-type: none;
		margin: 0;
	}

	&.flat { // horizontal list
		> li {
			display: inline-block;
			width: auto;

			> * { // this rule keeps 'block' components inline in a flat list
				display: inline-block;
				width: auto;
			}

			+ li {
				margin-left: $hgap-normal;
			}

			.bar,
			&.dot {
				// It would be cumbersome to unpick this
				// scss-lint:disable NestingDepth
				> li + li {
					margin-left: 0;
				}
				// scss-lint:enable NestingDepth
			}
		}

		&.dot > li + li:before { // dot bullets should be default but need pseudo-elements for flat lists.
			content: '\25cf';
			margin: 0 $hgap-normal;
		}
	}

	&.bar { // bar bullets
		> li:before {
			content: '|';
			margin-right: $hgap-normal;
		}

		&.flat > li:first-child:before {
			content: '';
			margin-right: 0;
		}
	}

	&.striped > :nth-child(odd) {
		background-color: $wc-ui-color-highlight-bg;
		color: $wc-ui-color-highlight-fg;
	}
}

// need qualifiying element to differentiate from unordered listLayout
// scss-lint:disable QualifyingElement
ol.listLayout {
	margin: 0 0 0 $list-layout-ordered-spacing;

	&.flat { // flat ordered lists use a pseudo-element with a counter
		counter-reset: li;

		> li:before {
			content: counter(li) '.';
			counter-increment: li;
			margin-right: $hgap-small;
		}

		&.none > li:before { // remove the counter if the separator is none
			content: '';
		}
	}
}
/* end wc.ui.listLayout.scss */
