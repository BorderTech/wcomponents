/* wc.ui.fieldLayout.scss */
@import 'fieldLayout_vars';

// field layouts may be an ordered list, in which case we want to expose the numbers so need the element qualifier
//scss-lint:disable QualifyingElement
ul.wc-fieldlayout {
	@include tight-box;
	list-style-type: none;
}
//scss-lint:enable QualifyingElement

.wc-field {
	+ .wc-field {
		margin-top: $vgap-normal;
	}

	// Flat is the most common use, but shouldn't be (due to a11y concerns which are not covered by WCAG 2.0)
	.flat > & {
		> label,
		> span,
		> div {
			display: inline-block;
			vertical-align: text-top;

			&:first-child { //the first child is the label or stand-in or merely an empty placeholder/spacer
				width: $label-width;
			}
		}

		> .wc-input {
			max-width: $input-width;
			width: $input-width;
		}
	}

	// Stacked is pretty easy, just need to put in a vertical spacer between the label and the controls. This should
	// probably be smaller than the gap between fields.
	.stacked > & {
		display: block;

		> .wc-label + .wc-input {
			margin-top: $vgap-small;
		}
	}
}

$wc-label-width-slug: wc_fld_lblwth;
$wc-input-width-slug: wc_fld_inpw;

@mixin wc-fld-layout($lwdth) {
	$lw: $lwdth * 1%;
	$iw: 100% - $lw;

	.#{$wc-label-width-slug}_#{$lwdth} {
		&.flat > .wc-field > :first-child {
			width: $lw;
		}

		&.stacked > .wc-field > .wc-input {
			margin-left: $lw;
		}

		> .wc-field > .wc-input {
			max-width: $iw;
			width: $iw;
		}
	}

	.#{$wc-input-width-slug}_#{$lwdth} > .wc-input {
		width: $lw;
	}
}

// @for $i from 1 through 100 {
// 	$wc-fld-lblw: $i * 1%;
@for $i from 1 through 20 {
	$j: $i * 5;
	@include wc-fld-layout($j);
}

$wc-fld-list: 33, 67;
@each $w in $wc-fld-list {
	@include wc-fld-layout($w);
}

// special case for 66: it _should_ be 67
.#{$wc-label-width-slug}_66 {
	&.flat > .wc-field > :first-child {
		width: 67%;
	}

	&.stacked > .wc-field > .wc-input {
		margin-left: 67%;
	}

	> .wc-field > .wc-input {
		max-width: 33%;
		width: 33%;
	}
}

.#{$wc-input-width-slug}_66 .wc-input {
	width: 67%;
}

// InputWidth class is added to the field to signify that an inputWidth is in use so we can size the components.
.wc_inputwidth > .wc-input {
	> .wc_input_wrapper {
		width: 100%;

		> input {
			@include border-box;
			width: 100%;
		}

		//&.wc-datefield > input[type="date"] { // native date iput
			// max-width: calc(100% - 2rem);
			// width: initial;
		//}

		&[role='combobox'] > input[type] { // fake date input
			max-width: calc(100% - 2rem);
			// width: initial;
		}
	}

	> textarea,
	> select,
	> fieldset {
		@include border-box;
		width: 100%;
	}
}

@include respond(small) {
	.wc-field {
		// Important to override all the above gubbins without another thousand rules.
		// scss-lint:disable ImportantRule
		> :first-child,
		> .wc-input {
			display: block;
			margin-left: 0 !important;
			max-width: 100% !important;
			width: 100% !important;
		}

		> .wc_fld_pl { //this is the placeholder for a null or moved label (moved for checkbox or radio). Remove on narrow viewports.
			display: none !important;
		}

		> .wc-label + .wc-input {
			margin-top: $vgap-small;
		}
	}
}
