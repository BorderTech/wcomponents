/* wc.ui.fieldLayout.scss */
@import 'fieldLayout-mixins';

// field layouts may be an ordered list, in which case we want to expose the numbers so need the element qualifier
//scss-lint:disable QualifyingElement
ul.wc-fieldlayout {
	@include tight-box;
	list-style-type: none;
}
//scss-lint:enable QualifyingElement

.wc-field {
	> label,
	> span {
		display: block;
	}

	.wc_fld_pl { //this is the placeholder for a null or moved label (moved for checkbox or radio). Remove on narrow viewports.
		display: none;
	}

	+ .wc-field {
		margin-top: $vgap-normal;
	}
}

.wc-input {
	margin-top: $vgap-small;

	// InputWidth class is added to the field to signify that an inputWidth is in use so we can size the components.
	.wc_inputwidth > & {
		> .wc_input_wrapper {
			width: 100%;

			> input {
				@include border-box;
				width: 100%;
			}

			&[role='combobox'] > input[type] { // fake date input
				max-width: calc(100% - 2rem);
			}
		}

		> [type='password'],
		> [type='number'],
		> textarea,
		> select,
		> fieldset {
			@include border-box;
			width: 100%;
		}
	}
}

@include respond-not-small {
	// This block should be in fieldLayout.dt.css but is here to work around a Safari bug.
	// Flat is the most common use, but shouldn't be (due to a11y concerns which are not adequately covered by WCAG 2.0)
	.flat > .wc-field {
		> label,
		> span,
		> div {
			display: inline-block;
			vertical-align: text-top;

			&:first-child { //the first child is the label or stand-in or merely an empty placeholder/spacer
				width: $label-width;
			}
		}

		> .wc-input {
			max-width: $input-width;
			width: $input-width;
		}

		.wc-input { // reset
			margin-top: 0;
		}
	}
}
