/* wc.ui.loading.scss */
// styling for the loading indicator that appears for page reloads and AJAX regions
@import 'mixins-common';

// set to 0 to not have any offset (i.e. the loading indicator will be in the middle of hte screen).
// Negative offset moved the loading indicator up in the screen, positiove moves it down.
$wc-root-loading-offset: -5% !default;

// loading indicator is generated and identified
//scss-lint:disable IdSelector
#wc-ui-loading {
	// the justification. align-items and align-content are to overcome an interesting issue in IE11.
	@include flex($justify: center, $align-items: center, $align-content: center) ;
	height: 100%;
	position: fixed;
	text-align: center; // for non-flexy UAs
	top: 0; // $wc-gap-normal;
	vertical-align: middle; // for non-flexy UAs
	width: 100%;
	z-index: $wc-z-index-unloading-message;

	div {
		display: inline-block;
		margin: auto;
		padding: $wc-gap-large;
		@if $wc-root-loading-offset != 0 {
			position: relative;
			top: $wc-root-loading-offset;
		}
	}
}

// (Usually ajax) busy areas
// We make the background of the busy element transparent and set all of its children to visibility:hidden so the
// element appears to just vanish and leave its loading indicator You may want to change this (a Cheshire cat maybe?).

$wc-common-busy-size: $wc-icon-normal !default;
$wc-common-busy-offset: $wc-common-busy-size / 2;

[aria-busy='true'] {
	text-align: center; // center the spinner

	> * {
		visibility: hidden;
	}

	&:before { // yeah - I know this won't work for replaced content... see below
		@include wc-icon($fa-var-spinner);
		@include wc-spin; // fa do not yet have a mixin for this.
		height: $wc-common-busy-size;
		width: $wc-common-busy-size;
	}
}

div,
section,
ul,
ol {
	&[aria-busy='true'] {
		position: relative;

		&:before {
			left: calc(50% - $wc-common-busy-offset);
			position: absolute;
			top: calc(50% - $wc-common-busy-offset);
		}
	}
}
